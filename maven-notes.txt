Surefire plugin:
				Unit testing
				
				
Failsafe plugin:
				Integration testing
				
				By default, the Failsafe Plugin will automatically include all test classes with the following wildcard patterns:
						- "**/IT*.java" - includes all of its subdirectories and all Java filenames that start with "IT".
						- "**/*IT.java" - includes all of its subdirectories and all Java filenames that end with "IT".
						- "**/*ITCase.java" - includes all of its subdirectories and all Java filenames that end with "ITCase".
						
						
jacoco-maven-plugin (code coverage)						
https://www.petrikainulainen.net/programming/maven/creating-code-coverage-reports-for-unit-and-integration-tests-with-the-jacoco-maven-plugin/


SpotBugs plugin:
https://spotbugs.readthedocs.io/en/stable/maven.html

Maven Enforcer plugin:
https://maven.apache.org/enforcer/enforcer-rules/index.html


Spring Boot Dependency management:
				
	Maven Super POM
	Spring Boot Build          - for building Spring Boot
	Spring Boot Dependencies   - BOM/properties
	Spring Boot Starter Parent - updates/adds common mavan plugins
	Our Spring Boot project
	
	mvn dependency:tree


Running/Stopping Spring Boot via Maven:

		1. mvn springboot:run
		   mvn springboot:start
		2. mvn springboot:stop


Maven Search order:

		1. Local repository
		2. Maven central repository
		3. Additional repositories configured
		
		
Additional repositories configuration:

		1. POM          - will be applicable to that Maven project
		2. settings.xml - system wide (all projects on that system)
		
		
Repository Element:

		1. id        - unique value required
		2. name      - human readable name
		3. url       - URL for the repository
		4. layout    - legacy or default (default is generally used)
		5. releases  - repository policy for handling downloading of releases
		6. snapshots - repository policy for handling downloading of snapshots
		
		
Repository Policy:

		1. enabled         - true/false
		2. updatePolicy    - always, daily (default), interval (xxx in minutes), never
		3. checksumPolicy  - what to do when verification of artifacts fails (ignore, fail, warn)



    <mirrors>
        <mirror>
            <id>UK</id>
            <url>http://uk.maven.org/maven2</url>
            <mirrorOf>central</mirrorOf>
        </mirror>
    </mirrors>
	

            <repositories>
                <repository>
                    <id>redhat-ga</id>
                    <url>https://maven.repository.redhat.com/ga/</url>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </repository>
            </repositories>


    <profiles>
        <profile>
            <id>jboss</id>
            <repositories>
                <repository>
                    <id>redhat-ga</id>
                    <url>https://maven.repository.redhat.com/ga/</url>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </repository>
            </repositories>
        </profile>
    </profiles>
    <activeProfiles>
        <activeProfile>jboss</activeProfile>
    </activeProfiles>
	
	
	
Manually installing dependencies:
	
		1. Download jar
		2. cd to that folder
		3. mvn install:install-file -Dfile=./ojdbc7.jar -DgroupId=com.oracle -DartifactId=ojdbc7 -Dversion=12.1.0.1 -Dpackaging=jar
		
		

Maven Password Encryption:
	
		https://maven.apache.org/guides/mini/guide-encryption.html
		
		
Download/Resolve dependencies from Nexus:

			<repositories>
				<-- for snapshot version -->
				<repository>
					<id>nexus-snapshot</id>
					<url>http://localhost:8081/repository/nexus-snapshot/</url>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
				</repository>
				<-- for release version -->
				<repository>
					<id>nexus-release</id>
					<url>http://localhost:8081/repository/nexus-release/</url>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
				</repository>
			</repositories>


Upload artifacts to Nexus:
 
			<distributionManagement>
				<-- for snapshot version -->
				<snapshotRepository>
					<id>nexus-snapshot</id>
					<url>http://localhost:8081/repository/nexus-snapshot/</url>
				</snapshotRepository>
				<-- for release version -->
				<repository>
					<id>nexus-release</id>
					<url>http://localhost:8081/repository/nexus-release/</url>
				</repository>
			</distributionManagement>


In settins.xml:

			<server>
				<id>nexus-snapshot</id>
				<username>admin</username>
				<password>admin123</password>
			</server>
			<server>
				<id>nexus-release</id>
				<username>admin</username>
				<password>admin123</password>
			</server>
			
			
For Nexus Group:

			1. Remove <repositories> section, <distributionManagement> will remain the same to upload artifacts
			2. In settings.xml, add <mirrors> section
			
							    <mirrors>
									<mirror>
										<id>central</id>
										<name>central</name>
										<url>http://localhost:8081/repository/nexus-group/</url>
										<mirrorOf>*</mirrorOf>
									</mirror>
								</mirrors>
								
								
Build Profiles Declaration:

			1. Per Project (pom.xml)
							mvn package -S <path-to-settings.xml>
			2. Per User (<user_home>/.m2/settings.xml)
			3. Global (<maven_home>/conf/settings.xml)
			
			
POM elements in Profiles:

			- repositories
			- pluginRepositories
			- dependencies
			- plugins
			- properties
			- modules
			- reporting
			- dependencyManagement
			- distributionManagement
			
			
Build elements in Profiles (sub-set):

			- defaultGoal
			- resources
			- testResources
			- finalName
			

View Active Profile:

			mvn help:active-profiles
			mvn help:active-profiles -P <profile-1>


Activating Profile:

			1. In pom.xml, in Profile configuration under activation attribute, activeByDefault -> true
											    <profiles>
													<profile>
														<id>packageCloud</id>
														<distributionManagement>
															<repository>
																<id>packageCloud.release</id>
																<url>packagecloud+https://packagecloud.io/springframeworkguru/release</url>
															</repository>
															<snapshotRepository>
																<id>packageCloud.snapshot</id>
																<url>packagecloud+https://packagecloud.io/springframeworkguru/snapshot</url>
															</snapshotRepository>
														</distributionManagement>
														<activation>
															<activeByDefault>true</activeByDefault>
														</activation>
													</profile>
												</profiles>
												
												<build>
													<extensions>
														<extension>
															<groupId>io.packagecloud.maven.wagon</groupId>
															<artifactId>maven-packagecloud-wagon</artifactId>
															<version>0.0.6</version>
														</extension>
													</extensions>
												</build>
			2. <activeProfile> section in settings.xml
											<profiles>
												<profile>
													<id>jboss</id>
													<repositories>
														<repository>
															<id>redhat-ga</id>
															<url>https://maven.repository.redhat.com/ga/</url>
															<snapshots>
																<enabled>false</enabled>
															</snapshots>
														</repository>
													</repositories>
												</profile>
											</profiles>
											<activeProfiles>
												<activeProfile>jboss</activeProfile>
											</activeProfiles>
			3. mvn package -P <profile-1>, <profile-2>
			
Deactivating Profile:

			1. mvn package -P !<profile-1>, !<profile-2>
			
			


Profile Usage:

				<properties>
					<TEST_HOST>localhost</TEST_HOST>
				</properties>


				<build>
					<plugins>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-surefire-plugin</artifactId>
							<version>2.22.0</version>
							<configuration>
								<environmentVariables>
									<TEST_HOST>${TEST_HOST}</TEST_HOST>
								</environmentVariables>
							</configuration>
						</plugin>
					</plugins>
				</build>


				<profiles>
					<profile>
						<id>test</id>
						<properties>
							<TEST_HOST>test.example.com</TEST_HOST>
						</properties>
					</profile>
					<profile>
						<id>uat</id>
						<properties>
							<TEST_HOST>uat.example.com</TEST_HOST>
						</properties>
					</profile>
				</profiles>



				class JavaHelloWorldTest {

					@Test
					void getHello() {

						System.out.println("#####################");
						System.out.println(System.getenv("TEST_HOST"));
					}
				}